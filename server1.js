const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const validator = require('validator');
const nodemailer = require('nodemailer');
const cors = require('cors');
const pool = require('./db');
const http = require('http');
const { Server } = require('socket.io');
const crypto = require('crypto');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: '*' } });

app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
function authenticateToken(req, res, next) {
  const token = req.headers['authorization']?.split(' ')[1];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email
app.post('/api/register', async (req, res) => {
  const { username, password, email } = req.body;

  if (!validator.isEmail(email)) {
    return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
  }

  try {
    const [rows] = await pool.query('SELECT * FROM users WHERE username = ? OR email = ?', [username, email]);
    if (rows.length > 0) {
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const verificationToken = crypto.randomBytes(32).toString('hex');

    await pool.query(
      'INSERT INTO users (username, password, email, verification_token) VALUES (?, ?, ?, ?)',
      [username, hashedPassword, email, verificationToken]
    );

    const verifyLink = `http://localhost:3000/api/verify-email?token=${verificationToken}`;

    const transporter = nodemailer.createTransport({
        host: 'smtp.mail.ru',
        port: 587,  // 465 –¥–ª—è SSL –∏–ª–∏ 587 –¥–ª—è TLS
        secure: false,  // true –¥–ª—è SSL, false –¥–ª—è TLS
        auth: {
          user: process.env.EMAIL_USER,  // –≤–∞—à –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
          pass: process.env.EMAIL_APP_PASSWORD,  // –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã
        },
      });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Email',
      html: `<h2>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É</h2><p>–ù–∞–∂–º–∏—Ç–µ <a href="${verifyLink}">—Å—é–¥–∞</a>, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å email.</p>`
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–∏—Å –≤–º–µ—Å—Ç–æ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    await transporter.sendMail(mailOptions);
    console.log('–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

    // –ï—Å–ª–∏ –ø–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    return res.status(201).json({ message: '–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—á—Ç—É' });

  } catch (err) {
    console.error(err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' });
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
app.get('/api/verify-email', async (req, res) => {
  const { token } = req.query;
  if (!token) return res.status(400).send('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.');

  try {
    const [rows] = await pool.query('SELECT * FROM users WHERE verification_token = ?', [token]);
    if (rows.length === 0) return res.status(400).send('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.');

    await pool.query('UPDATE users SET is_verified = true, verification_token = NULL WHERE id = ?', [rows[0].id]);

    // üîÅ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    res.redirect('http://localhost:3000/email-verified.html'); // –º–æ–∂–µ—à—å –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—É—Ç—å
  } catch (err) {
    console.error(err);
    res.status(500).send('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const [rows] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
    const user = rows[0];

    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    if (!user.is_verified) {
      return res.status(403).json({ message: 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.' });
    }

    const token = jwt.sign({ id: user.id, username: user.username, email: user.email }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.json({ token });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' });
  }
});

// –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get('/api/user', authenticateToken, async (req, res) => {
  try {
    const [rows] = await pool.query('SELECT * FROM users WHERE id = ?', [req.user.id]);
    if (rows.length > 0) {
      res.json({
        id: rows[0].id,
        username: rows[0].username,
        x: rows[0].x,
        y: rows[0].y,
        inventory: rows[0].inventory
      });
    } else {
      res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' });
  }
});

// –°–æ–∫–µ—Ç—ã: –∏–≥—Ä–æ–∫–∏
let players = {};

io.on('connection', (socket) => {
  console.log('–ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

  socket.on('join', (data) => {
    players[socket.id] = { username: data.username, x: 0, y: 0 };
    io.emit('players', players);
  });


  socket.on('move', (coords) => {
    if (players[socket.id]) {
      players[socket.id].x = coords.x;
      players[socket.id].y = coords.y;
      io.emit('players', players);
    }
  });

  socket.on('disconnect', () => {
    delete players[socket.id];
    io.emit('players', players);
  });
});

server.listen(3000, () => {
  console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
});
