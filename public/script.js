let socket = io();

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞–º–∏
function toggleForm() {
  const loginForm = document.getElementById('login-form');
  const registerForm = document.getElementById('register-form');
  
  if (loginForm.style.display !== 'none') {
    loginForm.style.display = 'none';
    registerForm.style.display = 'block';
  } else {
    registerForm.style.display = 'none';
    loginForm.style.display = 'block';
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
document.getElementById('registerForm').addEventListener('submit', async (event) => {
  event.preventDefault();
  const username = document.getElementById('register-username').value;
  const email = document.getElementById('register-email').value;
  const password = document.getElementById('register-password').value;

  const response = await fetch('/api/register', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ username, email, password }),
  });

  const data = await response.json();
  if (response.status === 201) {
    alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
    toggleForm();
  } else {
    alert(data.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
document.getElementById('loginForm').addEventListener('submit', async (event) => {
    event.preventDefault();
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;
  
    const response = await fetch('/api/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, password }),
    });
  
    const data = await response.json();
    if (response.status === 200) {
      alert('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      localStorage.setItem('token', data.token);
      document.getElementById('login-form').style.display = 'none';
      document.getElementById('gameArea').style.display = 'block';
    } else {
      alert(data.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  });

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
document.getElementById('joinBtn').addEventListener('click', () => {
  const playerName = document.getElementById('username').value;
  if (playerName) {
    socket.emit('join', { username: playerName });
  } else {
    alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
socket.on('players', (players) => {
  const playersList = document.getElementById('playersList');
  playersList.innerHTML = '';
  Object.values(players).forEach(player => {
    const li = document.createElement('li');
    li.textContent = `${player.username} - (${player.x}, ${player.y})`;
    playersList.appendChild(li);
  });
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const registerPasswordInput = document.getElementById('register-password');
const showRegisterPassword = document.getElementById('show-register-password');

if (registerPasswordInput && showRegisterPassword) {
  showRegisterPassword.addEventListener('change', () => {
    registerPasswordInput.type = showRegisterPassword.checked ? 'text' : 'password';
  });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const loginPasswordInput = document.getElementById('login-password');
const showLoginPassword = document.getElementById('show-login-password');

if (loginPasswordInput && showLoginPassword) {
  showLoginPassword.addEventListener('change', () => {
    loginPasswordInput.type = showLoginPassword.checked ? 'text' : 'password';
  });
}

// üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑
window.addEventListener('DOMContentLoaded', async () => {
    const token = localStorage.getItem('token');
    if (token) {
      const response = await fetch('/api/user', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
  
      if (response.ok) {
        const user = await response.json();
        document.getElementById('login-form').style.display = 'none';
        document.getElementById('gameArea').style.display = 'block';
        document.getElementById('username').value = user.username;
        socket.emit('join', { username: user.username });
      } else {
        localStorage.removeItem('token'); // –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ‚Äî —É–¥–∞–ª–∏–º
      }
    }
});

document.getElementById('logoutBtn').addEventListener('click', () => {
  localStorage.removeItem('token'); // —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω
  document.getElementById('gameArea').style.display = 'none';
  document.getElementById('login-form').style.display = 'block';
  document.getElementById('loginForm').reset();
  socket.emit('disconnect'); // –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–æ–∫–µ—Ç–∞
});




//–ú–û–ù–ï–¢–´

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É
/* document.getElementById('openCoinModal').addEventListener('click', async () => {
  await updateCoinBalance();
  document.getElementById('coinModal').style.display = 'block';
}); */

// –ü–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã
/* document.getElementById('collectCoinsBtn').addEventListener('click', async () => {
  const token = localStorage.getItem('token');
  const res = await fetch('/api/collect-coins', {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${token}` }
  });

  const data = await res.json();
  if (res.ok) {
    alert(data.message);
    updateCoinBalance();
  } else {
    alert(data.message);
  }
}); */

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
/* async function updateCoinBalance() {
  const token = localStorage.getItem('token');
  const res = await fetch('/api/coins', {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  const data = await res.json();
  document.getElementById('coinBalance').textContent = data.coins;

  // –ê–≤—Ç–æ-—Ç–∞–π–º–µ—Ä –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞
  if (data.last_collected_at) {
    const lastTime = new Date(data.last_collected_at);
    const now = new Date();
    const diff = 300 - Math.floor((now - lastTime) / 1000);
    if (diff > 0) {
      const timerEl = document.getElementById('coinTimerText');
      let remaining = diff;
      timerEl.textContent = `–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${Math.ceil(remaining / 60)} –º–∏–Ω—É—Ç...`;
      const interval = setInterval(() => {
        remaining--;
        if (remaining <= 0) {
          clearInterval(interval);
          timerEl.textContent = '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã:';
        } else {
          timerEl.textContent = `–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${Math.ceil(remaining / 60)} –º–∏–Ω—É—Ç...`;
        }
      }, 1000);
    }
  }
} */

// ‚ú® –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–∞–ª–∫–µ
function showMagicMessage(text) {
    const messageEl = document.getElementById('coinTimerText');
    messageEl.textContent = text;
    messageEl.style.opacity = 0;
    messageEl.style.transition = 'opacity 0.6s ease';
    setTimeout(() => {
      messageEl.style.opacity = 1;
    }, 50);
  }
  
  // üåô –ö—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ
  const openBtn = document.getElementById('openCoinModal');
  const modal = document.getElementById('coinModal');
  const closeModalBtn = document.getElementById('closeModalBtn');
  
  openBtn.addEventListener('click', async () => {
    await updateCoinBalance();
    modal.style.display = 'flex';
  });
  
  closeModalBtn.addEventListener('click', () => {
    modal.style.display = 'none';
  });
  
  window.addEventListener('click', (e) => {
    if (e.target === modal) modal.style.display = 'none';
  });
  
  // ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã
  document.getElementById('collectCoinsBtn').addEventListener('click', async () => {
    const token = localStorage.getItem('token');
    const res = await fetch('/api/collect-coins', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${token}` }
    });
  
    const data = await res.json();
    if (res.ok) {
      showMagicMessage(data.message || '–í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –º–æ–Ω–µ—Ç! üí∞');
      updateCoinBalance();
    } else {
      if (data.remaining) {
        const mins = Math.floor(data.remaining / 60);
        const secs = data.remaining % 60;
        showMagicMessage(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${mins} –º–∏–Ω ${secs} —Å–µ–∫...`);
      } else {
        showMagicMessage(data.message || '–û—à–∏–±–∫–∞!');
      }
    }
  });
  
  // üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ —Ç–∞–π–º–µ—Ä
  async function updateCoinBalance() {
    const token = localStorage.getItem('token');
    const res = await fetch('/api/coins', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    const data = await res.json();
    document.getElementById('coinBalance').textContent = data.coins;
  
    if (data.last_collected_at) {
      const lastTime = new Date(data.last_collected_at);
      const now = new Date();
      let remaining = Math.floor(300 - (now - lastTime) / 1000);
  
      if (remaining > 0) {
        const timerEl = document.getElementById('coinTimerText');
        const interval = setInterval(() => {
          const mins = Math.floor(remaining / 60);
          const secs = remaining % 60;
          timerEl.textContent = `–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${mins} –º–∏–Ω ${secs} —Å–µ–∫...`;
          remaining--;
  
          if (remaining <= 0) {
            clearInterval(interval);
            showMagicMessage('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã ‚ú®');
          }
        }, 1000);
      } else {
        showMagicMessage('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã ‚ú®');
      }
    } else {
      showMagicMessage('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã ‚ú®');
    }
  }